//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InterfazWeb.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFAllServiciosWhitTipoEvento", ReplyAction="http://tempuri.org/IService/WCFAllServiciosWhitTipoEventoResponse")]
        Dominio.Servicio[] WCFAllServiciosWhitTipoEvento();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFAllServiciosWhitTipoEvento", ReplyAction="http://tempuri.org/IService/WCFAllServiciosWhitTipoEventoResponse")]
        System.Threading.Tasks.Task<Dominio.Servicio[]> WCFAllServiciosWhitTipoEventoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFAddProveedor", ReplyAction="http://tempuri.org/IService/WCFAddProveedorResponse")]
        bool WCFAddProveedor(string nombreCompletoProv, string nombreUsuario, string passw, string nombreFantasia, string email, string telefono, bool esVIP, double valorArancelVIP, Dominio.ProveedorServicio[] listaServicios);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFAddProveedor", ReplyAction="http://tempuri.org/IService/WCFAddProveedorResponse")]
        System.Threading.Tasks.Task<bool> WCFAddProveedorAsync(string nombreCompletoProv, string nombreUsuario, string passw, string nombreFantasia, string email, string telefono, bool esVIP, double valorArancelVIP, Dominio.ProveedorServicio[] listaServicios);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFShowAllProveedores", ReplyAction="http://tempuri.org/IService/WCFShowAllProveedoresResponse")]
        Dominio.Proveedor[] WCFShowAllProveedores();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFShowAllProveedores", ReplyAction="http://tempuri.org/IService/WCFShowAllProveedoresResponse")]
        System.Threading.Tasks.Task<Dominio.Proveedor[]> WCFShowAllProveedoresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFShowProveedorPorRUT", ReplyAction="http://tempuri.org/IService/WCFShowProveedorPorRUTResponse")]
        Dominio.Proveedor WCFShowProveedorPorRUT(string nombreRUT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFShowProveedorPorRUT", ReplyAction="http://tempuri.org/IService/WCFShowProveedorPorRUTResponse")]
        System.Threading.Tasks.Task<Dominio.Proveedor> WCFShowProveedorPorRUTAsync(string nombreRUT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFChangeDatosProveedor", ReplyAction="http://tempuri.org/IService/WCFChangeDatosProveedorResponse")]
        bool WCFChangeDatosProveedor(string idProveedor, System.DateTime fechaIngreso, bool esVIP, double valorArncelVIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFChangeDatosProveedor", ReplyAction="http://tempuri.org/IService/WCFChangeDatosProveedorResponse")]
        System.Threading.Tasks.Task<bool> WCFChangeDatosProveedorAsync(string idProveedor, System.DateTime fechaIngreso, bool esVIP, double valorArncelVIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFChangeArancelAnualProveedor", ReplyAction="http://tempuri.org/IService/WCFChangeArancelAnualProveedorResponse")]
        bool WCFChangeArancelAnualProveedor(int arancel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFChangeArancelAnualProveedor", ReplyAction="http://tempuri.org/IService/WCFChangeArancelAnualProveedorResponse")]
        System.Threading.Tasks.Task<bool> WCFChangeArancelAnualProveedorAsync(int arancel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFDesactivarProveedor", ReplyAction="http://tempuri.org/IService/WCFDesactivarProveedorResponse")]
        bool WCFDesactivarProveedor(string rutProveedor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFDesactivarProveedor", ReplyAction="http://tempuri.org/IService/WCFDesactivarProveedorResponse")]
        System.Threading.Tasks.Task<bool> WCFDesactivarProveedorAsync(string rutProveedor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFGuardarTxtProveedores", ReplyAction="http://tempuri.org/IService/WCFGuardarTxtProveedoresResponse")]
        bool WCFGuardarTxtProveedores();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WCFGuardarTxtProveedores", ReplyAction="http://tempuri.org/IService/WCFGuardarTxtProveedoresResponse")]
        System.Threading.Tasks.Task<bool> WCFGuardarTxtProveedoresAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : InterfazWeb.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<InterfazWeb.ServiceReference1.IService>, InterfazWeb.ServiceReference1.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Dominio.Servicio[] WCFAllServiciosWhitTipoEvento() {
            return base.Channel.WCFAllServiciosWhitTipoEvento();
        }
        
        public System.Threading.Tasks.Task<Dominio.Servicio[]> WCFAllServiciosWhitTipoEventoAsync() {
            return base.Channel.WCFAllServiciosWhitTipoEventoAsync();
        }
        
        public bool WCFAddProveedor(string nombreCompletoProv, string nombreUsuario, string passw, string nombreFantasia, string email, string telefono, bool esVIP, double valorArancelVIP, Dominio.ProveedorServicio[] listaServicios) {
            return base.Channel.WCFAddProveedor(nombreCompletoProv, nombreUsuario, passw, nombreFantasia, email, telefono, esVIP, valorArancelVIP, listaServicios);
        }
        
        public System.Threading.Tasks.Task<bool> WCFAddProveedorAsync(string nombreCompletoProv, string nombreUsuario, string passw, string nombreFantasia, string email, string telefono, bool esVIP, double valorArancelVIP, Dominio.ProveedorServicio[] listaServicios) {
            return base.Channel.WCFAddProveedorAsync(nombreCompletoProv, nombreUsuario, passw, nombreFantasia, email, telefono, esVIP, valorArancelVIP, listaServicios);
        }
        
        public Dominio.Proveedor[] WCFShowAllProveedores() {
            return base.Channel.WCFShowAllProveedores();
        }
        
        public System.Threading.Tasks.Task<Dominio.Proveedor[]> WCFShowAllProveedoresAsync() {
            return base.Channel.WCFShowAllProveedoresAsync();
        }
        
        public Dominio.Proveedor WCFShowProveedorPorRUT(string nombreRUT) {
            return base.Channel.WCFShowProveedorPorRUT(nombreRUT);
        }
        
        public System.Threading.Tasks.Task<Dominio.Proveedor> WCFShowProveedorPorRUTAsync(string nombreRUT) {
            return base.Channel.WCFShowProveedorPorRUTAsync(nombreRUT);
        }
        
        public bool WCFChangeDatosProveedor(string idProveedor, System.DateTime fechaIngreso, bool esVIP, double valorArncelVIP) {
            return base.Channel.WCFChangeDatosProveedor(idProveedor, fechaIngreso, esVIP, valorArncelVIP);
        }
        
        public System.Threading.Tasks.Task<bool> WCFChangeDatosProveedorAsync(string idProveedor, System.DateTime fechaIngreso, bool esVIP, double valorArncelVIP) {
            return base.Channel.WCFChangeDatosProveedorAsync(idProveedor, fechaIngreso, esVIP, valorArncelVIP);
        }
        
        public bool WCFChangeArancelAnualProveedor(int arancel) {
            return base.Channel.WCFChangeArancelAnualProveedor(arancel);
        }
        
        public System.Threading.Tasks.Task<bool> WCFChangeArancelAnualProveedorAsync(int arancel) {
            return base.Channel.WCFChangeArancelAnualProveedorAsync(arancel);
        }
        
        public bool WCFDesactivarProveedor(string rutProveedor) {
            return base.Channel.WCFDesactivarProveedor(rutProveedor);
        }
        
        public System.Threading.Tasks.Task<bool> WCFDesactivarProveedorAsync(string rutProveedor) {
            return base.Channel.WCFDesactivarProveedorAsync(rutProveedor);
        }
        
        public bool WCFGuardarTxtProveedores() {
            return base.Channel.WCFGuardarTxtProveedores();
        }
        
        public System.Threading.Tasks.Task<bool> WCFGuardarTxtProveedoresAsync() {
            return base.Channel.WCFGuardarTxtProveedoresAsync();
        }
    }
}
